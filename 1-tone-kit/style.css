html {
    /* 设置 HTML 文档的基础字体大小为 10px */
    font-size: 10px;
}

body, html {
    /*
     * 这个 CSS 属性是 margin-top、margin-right、margin-bottom 和 margin-left 四个属性的简写形式。
     * 它用于设置元素周围的外边距(空白区域)。
     *
     * 你也可以分别为每个方向设置不同的外边距,例如:
     * margin: 1rem 2rem 3rem 4rem;
     * 这将为元素的上、右、下、左方向分别设置 1rem、2rem、3rem 和 4rem 的外边距。
     *
     * 外边距用于控制元素与其他元素或容器边缘之间的间距。
     * 它可以用于布局、对齐和调整元素之间的间距,从而创建更加美观和有条理的布局。
     *
     * 需要注意的是,外边距可能会合并,这意味着相邻元素的外边距可能会合并为一个较大的外边距。
     */
    margin: 0;
    /*
     * 这个 CSS 属性是 padding-top、padding-right、padding-bottom 和 padding-left 四个属性的简写形式。
     * 它用于设置元素内容区域与边框之间的内边距(填充区域)。
     *
     * 你也可以分别为每个方向设置不同的内边距,例如:
     * padding: 1rem 2rem 3rem 4rem;
     * 这将为元素的上、右、下、左方向分别设置 1rem、2rem、3rem 和 4rem 的内边距。
     *
     * 内边距用于控制元素内容与边框之间的间距。
     * 它可以用于调整元素内容的呈现方式,例如增加文本周围的空白区域或为按钮添加填充。
     *
     * 内边距会增加元素的总大小,因为它位于边框内部。
     * 这与外边距不同,外边距位于元素外部,不会影响元素的实际大小。
     *
     * 合理使用内边距可以提高元素的可读性和美观性,同时也可以用于一些特殊的布局技术,如盒子模型布局。
     */
    padding: 0;
    /* 将 <body> 和 <html> 元素的字体族设置为 sans-serif, 如果用户的系统没有安装指定的字体,浏览器将使用默认的无衬线字体 */
    font-family: sans-serif;
}

.keys {
    /* 设置元素的背景颜色为 gainsboro (浅灰色) */
    background-color: gainsboro;
    /* 将元素设置为 Flex 布局容器 */
    display: flex;
    /*flex: 1;*/
    /* 设置元素的最小高度为视口高度的 100%,确保元素至少占据整个视口的高度 */
    min-height: 100vh;
    /* 将容器内的子元素在交叉轴(垂直方向)上居中对齐 */
    align-items: center;
    /* 将容器内的子元素在主轴(水平方向)上居中对齐 */
    justify-content: center;
}

.key {
    /*
     * 这个 CSS 属性也是 border-width、border-style 和 border-color 三个属性的简写形式。
     *
     * .4rem 表示边框的宽度,单位为 rem。rem 是另一个相对单位,相对于根元素(<html>)的字体大小。
     * solid 表示边框的样式为实线。
     * black 表示边框的颜色为黑色。
     */
    border: .4rem solid black;

    /*
     * 设置元素边框的圆角半径。
     *
     * border-radius 属性可以应用于任何一个角或者全部四个角。
     * 如果只提供一个值,那么所有四个角的圆角半径都将使用这个值。
     *
     * 你也可以分别为每个角设置不同的圆角半径,例如:
     * border-radius: 1rem 2rem 3rem 4rem;
     * 这将为元素的左上角、右上角、右下角和左下角分别设置 1rem、2rem、3rem 和 4rem 的圆角半径。
     */
    border-radius: .5rem;
    margin: 1rem;
    font-size: 1.5rem;
    /*
     * 在这个值中,提供了两个长度值:
     *
     * 1rem 表示上下内边距的大小,单位为 rem。
     * .5rem 表示左右内边距的大小,单位也为 rem。
     */
    padding: 1rem .5rem;

    /*
     * transition: all .07s ease;
     *
     * 这个 CSS 属性用于设置元素属性值发生变化时的过渡效果。
     *
     * 它是 transition-property、transition-duration、transition-timing-function 和 transition-delay 四个属性的简写形式。
     *
     * all 表示应用过渡效果的属性。在这里,all 意味着所有能够过渡的属性都将获得过渡效果。
     * 你也可以指定具体的属性,如 color、background-color、transform 等。
     *
     * .07s 表示过渡效果的持续时间,即属性值从初始值过渡到最终值所需的时间。
     * 在这里,持续时间为 0.07 秒(70 毫秒)。
     *
     * ease 是过渡效果的时间曲线函数,它定义了过渡效果的加速和减速方式。
     * ease 表示过渡效果在开始和结束时较慢,在中间时较快,创造了一种平滑的过渡效果。
     * 其他可选值包括 linear(线性过渡)、ease-in(加速过渡)、ease-out(减速过渡)等。
     *
     * 因此,transition: all .07s ease; 将为所有能够过渡的属性设置一个持续时间为 0.07 秒、时间曲线为 ease 的过渡效果。
     *
     * 过渡效果通常用于创建平滑的动画和交互体验,例如鼠标悬停时的颜色或大小变化。
     * 它可以提高用户体验,使界面看起来更加生动和专业。
     *
     * 需要注意的是,只有当属性值发生变化时,过渡效果才会生效。
     * 如果属性值没有变化,则不会触发过渡效果。
     *
     * 另外,不是所有的属性都能够过渡。只有某些属性(如颜色、大小、位置等)支持过渡效果。
     */
    transition: all .1s ease;
    width: 10rem;
    text-align: center;
    color: white;
    background: rgba(0,0,0,0.4);

    /*
     * text-shadow: 0 0 .5rem black;
     *
     * 这个 CSS 属性用于为文本添加阴影效果。
     *
     * 它包含四个值,分别表示:
     *
     * 1. 水平偏移量 (0)
     *    这个值表示阴影相对于文本的水平偏移量。
     *    0 表示阴影与文本在水平方向上没有偏移。
     *
     * 2. 垂直偏移量 (0)
     *    这个值表示阴影相对于文本的垂直偏移量。
     *    0 表示阴影与文本在垂直方向上没有偏移。
     *
     * 3. 模糊半径 (.5rem)
     *    这个值表示阴影的模糊程度。
     *    .5rem 表示阴影的模糊半径为 0.5 倍根元素的字体大小。
     *    默认情况下,大多数浏览器将根元素的字体大小设置为 16 像素,因此 .5rem 通常等于 8 像素。
     *
     * 4. 阴影颜色 (black)
     *    这个值表示阴影的颜色。
     *    black 表示阴影颜色为黑色。
     *
     * 因此,text-shadow: 0 0 .5rem black; 将为文本添加一个没有偏移的、模糊半径为 0.5 倍根元素字体大小的黑色阴影效果。
     *
     * 文本阴影可以用于增强文本的立体感和可读性,或者创建一些特殊的视觉效果。
     *
     * 你也可以通过设置不同的值来调整阴影的位置、模糊程度和颜色。
     * 例如,text-shadow: 2px 2px 3px red; 将为文本添加一个右下方向偏移 2 像素、模糊半径为 3 像素的红色阴影效果。
     *
     * 需要注意的是,文本阴影效果只适用于文本内容,不适用于其他元素。
     * 如果你需要为其他元素添加阴影效果,可以使用 box-shadow 属性。
     */
    text-shadow: 0 0 .5rem black;
}

kbd {
    display: block;
    font-size: 4rem;
}

.sound {
    font-size: 1.2rem;
    text-transform: uppercase;
    letter-spacing: .1rem;
    color: #ffc600;
}

.playing {
    /*
     * 这个 CSS 属性用于对元素应用 2D 或 3D 转换。
     *
     * scale() 函数是 transform 属性的一个值,它用于缩放元素的大小。
     *
     * 在这个例子中,scale(1.1) 表示将元素的大小缩放到原始大小的 1.1 倍。
     *
     * scale() 函数还可以接受两个参数,分别控制水平和垂直方向的缩放比例。
     * 例如,transform: scale(1.2, 0.8); 将使元素在水平方向放大 20%,在垂直方向缩小 20%。
     *
     * transform 属性支持多种转换函数,如 translate() 用于平移、rotate() 用于旋转、skew() 用于倾斜等。
     * 这些函数可以单独使用,也可以组合使用,从而实现各种复杂的转换效果。
     *
     * 转换通常与过渡效果 (transition) 一起使用,以创建流畅的动画效果。
     *
     * 需要注意的是,transform 属性不会影响元素在文档流中的位置,只会改变元素的可视渲染效果。
     * 如果需要改变元素在文档流中的位置,可以使用 position 属性。
     *
     * 转换是 CSS 中一个强大的功能,可以用于实现各种视觉效果和动画,提高网页的交互性和吸引力。
     */
    transform: scale(1.1);
    border-color: #ffc600;
    box-shadow: 0 0 1rem #ffc600;
}